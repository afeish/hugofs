// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package global

import (
	"errors"
	"fmt"
)

const (
	// RpcErrCodeINVALID is a RpcErrCode of type INVALID.
	RpcErrCodeINVALID RpcErrCode = iota
	// RpcErrCodeNOTADIRECTORY is a RpcErrCode of type NOT_A_DIRECTORY.
	RpcErrCodeNOTADIRECTORY
	// RpcErrCodeNOTAREGULARFILE is a RpcErrCode of type NOT_A_REGULAR_FILE.
	RpcErrCodeNOTAREGULARFILE
	// RpcErrCodeINVALIDENTRYNAME is a RpcErrCode of type INVALID_ENTRY_NAME.
	RpcErrCodeINVALIDENTRYNAME
)

var ErrInvalidRpcErrCode = errors.New("not a valid RpcErrCode")

const _RpcErrCodeName = "INVALIDNOT_A_DIRECTORYNOT_A_REGULAR_FILEINVALID_ENTRY_NAME"

var _RpcErrCodeMap = map[RpcErrCode]string{
	RpcErrCodeINVALID:          _RpcErrCodeName[0:7],
	RpcErrCodeNOTADIRECTORY:    _RpcErrCodeName[7:22],
	RpcErrCodeNOTAREGULARFILE:  _RpcErrCodeName[22:40],
	RpcErrCodeINVALIDENTRYNAME: _RpcErrCodeName[40:58],
}

// String implements the Stringer interface.
func (x RpcErrCode) String() string {
	if str, ok := _RpcErrCodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RpcErrCode(%d)", x)
}

var _RpcErrCodeValue = map[string]RpcErrCode{
	_RpcErrCodeName[0:7]:   RpcErrCodeINVALID,
	_RpcErrCodeName[7:22]:  RpcErrCodeNOTADIRECTORY,
	_RpcErrCodeName[22:40]: RpcErrCodeNOTAREGULARFILE,
	_RpcErrCodeName[40:58]: RpcErrCodeINVALIDENTRYNAME,
}

// ParseRpcErrCode attempts to convert a string to a RpcErrCode.
func ParseRpcErrCode(name string) (RpcErrCode, error) {
	if x, ok := _RpcErrCodeValue[name]; ok {
		return x, nil
	}
	return RpcErrCode(0), fmt.Errorf("%s is %w", name, ErrInvalidRpcErrCode)
}

// MarshalText implements the text marshaller method.
func (x RpcErrCode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RpcErrCode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRpcErrCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
