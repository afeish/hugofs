// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: meta/node.proto

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RawNodeService_IfExistsInode_FullMethodName      = "/hugo.v1.meta.RawNodeService/IfExistsInode"
	RawNodeService_GetInodeAttr_FullMethodName       = "/hugo.v1.meta.RawNodeService/GetInodeAttr"
	RawNodeService_Lookup_FullMethodName             = "/hugo.v1.meta.RawNodeService/Lookup"
	RawNodeService_ListItemUnderInode_FullMethodName = "/hugo.v1.meta.RawNodeService/ListItemUnderInode"
	RawNodeService_UpdateInodeAttr_FullMethodName    = "/hugo.v1.meta.RawNodeService/UpdateInodeAttr"
	RawNodeService_DeleteInode_FullMethodName        = "/hugo.v1.meta.RawNodeService/DeleteInode"
	RawNodeService_DeleteDirInode_FullMethodName     = "/hugo.v1.meta.RawNodeService/DeleteDirInode"
	RawNodeService_CreateInode_FullMethodName        = "/hugo.v1.meta.RawNodeService/CreateInode"
	RawNodeService_Link_FullMethodName               = "/hugo.v1.meta.RawNodeService/Link"
	RawNodeService_Rename_FullMethodName             = "/hugo.v1.meta.RawNodeService/Rename"
	RawNodeService_AcquireFileLock_FullMethodName    = "/hugo.v1.meta.RawNodeService/AcquireFileLock"
	RawNodeService_GetFileLock_FullMethodName        = "/hugo.v1.meta.RawNodeService/GetFileLock"
	RawNodeService_DelFileLock_FullMethodName        = "/hugo.v1.meta.RawNodeService/DelFileLock"
	RawNodeService_GetFileLocks_FullMethodName       = "/hugo.v1.meta.RawNodeService/GetFileLocks"
)

// RawNodeServiceClient is the client API for RawNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawNodeServiceClient interface {
	// IfExistsInode check if the inode exists.
	IfExistsInode(ctx context.Context, in *IfExistsInode_Request, opts ...grpc.CallOption) (*IfExistsInode_Response, error)
	// GetInodeAttr returns the attributes of the specified inode.
	GetInodeAttr(ctx context.Context, in *GetInodeAttr_Request, opts ...grpc.CallOption) (*GetInodeAttr_Response, error)
	// Lookup returns the attributes of specified inode which under the given inode.
	Lookup(ctx context.Context, in *Lookup_Request, opts ...grpc.CallOption) (*Lookup_Response, error)
	// ListItemUnderInode returns the items under the specified inode.
	ListItemUnderInode(ctx context.Context, in *ListItemUnderInode_Request, opts ...grpc.CallOption) (*ListItemUnderInode_Response, error)
	// UpdateInodeAttr update the attr of the specified inode, return the right attr.
	UpdateInodeAttr(ctx context.Context, in *UpdateInodeAttr_Request, opts ...grpc.CallOption) (*UpdateInodeAttr_Response, error)
	// DeleteInode delete the specified inode, if the inode is a dir, it will return an error.
	DeleteInode(ctx context.Context, in *DeleteInode_Request, opts ...grpc.CallOption) (*DeleteInode_Response, error)
	// DeleteDirInode deletes a directory inode.
	// If the directory is not empty and the request is not set as recursively, it will return an error.
	DeleteDirInode(ctx context.Context, in *DeleteDirInode_Request, opts ...grpc.CallOption) (*DeleteDirInode_Response, error)
	// CreateInode will create a brand new inode with the given attributes.
	CreateInode(ctx context.Context, in *CreateInode_Request, opts ...grpc.CallOption) (*CreateInode_Response, error)
	// Link will make a hard link to the old inode with the given attributes
	Link(ctx context.Context, in *Link_Request, opts ...grpc.CallOption) (*Link_Response, error)
	// Rename move an entry from a source directory to another with given name.
	// The targeted entry will be overwrited if it's a file or empty directory.
	Rename(ctx context.Context, in *Rename_Request, opts ...grpc.CallOption) (*Rename_Response, error)
	// AcquireFileLock will acquire a file lock.
	AcquireFileLock(ctx context.Context, in *AcquireFileLock_Request, opts ...grpc.CallOption) (*AcquireFileLock_Request, error)
	// GetFileLock will acquire a file lock.
	GetFileLock(ctx context.Context, in *GetFileLock_Request, opts ...grpc.CallOption) (*GetFileLock_Response, error)
	// DelFileLock will release a file lock.
	DelFileLock(ctx context.Context, in *DelFileLock_Request, opts ...grpc.CallOption) (*DelFileLock_Response, error)
	// GetFileLocks will get all file locks.
	GetFileLocks(ctx context.Context, in *GetFileLocks_Request, opts ...grpc.CallOption) (*GetFileLocks_Response, error)
}

type rawNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRawNodeServiceClient(cc grpc.ClientConnInterface) RawNodeServiceClient {
	return &rawNodeServiceClient{cc}
}

func (c *rawNodeServiceClient) IfExistsInode(ctx context.Context, in *IfExistsInode_Request, opts ...grpc.CallOption) (*IfExistsInode_Response, error) {
	out := new(IfExistsInode_Response)
	err := c.cc.Invoke(ctx, RawNodeService_IfExistsInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) GetInodeAttr(ctx context.Context, in *GetInodeAttr_Request, opts ...grpc.CallOption) (*GetInodeAttr_Response, error) {
	out := new(GetInodeAttr_Response)
	err := c.cc.Invoke(ctx, RawNodeService_GetInodeAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) Lookup(ctx context.Context, in *Lookup_Request, opts ...grpc.CallOption) (*Lookup_Response, error) {
	out := new(Lookup_Response)
	err := c.cc.Invoke(ctx, RawNodeService_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) ListItemUnderInode(ctx context.Context, in *ListItemUnderInode_Request, opts ...grpc.CallOption) (*ListItemUnderInode_Response, error) {
	out := new(ListItemUnderInode_Response)
	err := c.cc.Invoke(ctx, RawNodeService_ListItemUnderInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) UpdateInodeAttr(ctx context.Context, in *UpdateInodeAttr_Request, opts ...grpc.CallOption) (*UpdateInodeAttr_Response, error) {
	out := new(UpdateInodeAttr_Response)
	err := c.cc.Invoke(ctx, RawNodeService_UpdateInodeAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) DeleteInode(ctx context.Context, in *DeleteInode_Request, opts ...grpc.CallOption) (*DeleteInode_Response, error) {
	out := new(DeleteInode_Response)
	err := c.cc.Invoke(ctx, RawNodeService_DeleteInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) DeleteDirInode(ctx context.Context, in *DeleteDirInode_Request, opts ...grpc.CallOption) (*DeleteDirInode_Response, error) {
	out := new(DeleteDirInode_Response)
	err := c.cc.Invoke(ctx, RawNodeService_DeleteDirInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) CreateInode(ctx context.Context, in *CreateInode_Request, opts ...grpc.CallOption) (*CreateInode_Response, error) {
	out := new(CreateInode_Response)
	err := c.cc.Invoke(ctx, RawNodeService_CreateInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) Link(ctx context.Context, in *Link_Request, opts ...grpc.CallOption) (*Link_Response, error) {
	out := new(Link_Response)
	err := c.cc.Invoke(ctx, RawNodeService_Link_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) Rename(ctx context.Context, in *Rename_Request, opts ...grpc.CallOption) (*Rename_Response, error) {
	out := new(Rename_Response)
	err := c.cc.Invoke(ctx, RawNodeService_Rename_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) AcquireFileLock(ctx context.Context, in *AcquireFileLock_Request, opts ...grpc.CallOption) (*AcquireFileLock_Request, error) {
	out := new(AcquireFileLock_Request)
	err := c.cc.Invoke(ctx, RawNodeService_AcquireFileLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) GetFileLock(ctx context.Context, in *GetFileLock_Request, opts ...grpc.CallOption) (*GetFileLock_Response, error) {
	out := new(GetFileLock_Response)
	err := c.cc.Invoke(ctx, RawNodeService_GetFileLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) DelFileLock(ctx context.Context, in *DelFileLock_Request, opts ...grpc.CallOption) (*DelFileLock_Response, error) {
	out := new(DelFileLock_Response)
	err := c.cc.Invoke(ctx, RawNodeService_DelFileLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawNodeServiceClient) GetFileLocks(ctx context.Context, in *GetFileLocks_Request, opts ...grpc.CallOption) (*GetFileLocks_Response, error) {
	out := new(GetFileLocks_Response)
	err := c.cc.Invoke(ctx, RawNodeService_GetFileLocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawNodeServiceServer is the server API for RawNodeService service.
// All implementations should embed UnimplementedRawNodeServiceServer
// for forward compatibility
type RawNodeServiceServer interface {
	// IfExistsInode check if the inode exists.
	IfExistsInode(context.Context, *IfExistsInode_Request) (*IfExistsInode_Response, error)
	// GetInodeAttr returns the attributes of the specified inode.
	GetInodeAttr(context.Context, *GetInodeAttr_Request) (*GetInodeAttr_Response, error)
	// Lookup returns the attributes of specified inode which under the given inode.
	Lookup(context.Context, *Lookup_Request) (*Lookup_Response, error)
	// ListItemUnderInode returns the items under the specified inode.
	ListItemUnderInode(context.Context, *ListItemUnderInode_Request) (*ListItemUnderInode_Response, error)
	// UpdateInodeAttr update the attr of the specified inode, return the right attr.
	UpdateInodeAttr(context.Context, *UpdateInodeAttr_Request) (*UpdateInodeAttr_Response, error)
	// DeleteInode delete the specified inode, if the inode is a dir, it will return an error.
	DeleteInode(context.Context, *DeleteInode_Request) (*DeleteInode_Response, error)
	// DeleteDirInode deletes a directory inode.
	// If the directory is not empty and the request is not set as recursively, it will return an error.
	DeleteDirInode(context.Context, *DeleteDirInode_Request) (*DeleteDirInode_Response, error)
	// CreateInode will create a brand new inode with the given attributes.
	CreateInode(context.Context, *CreateInode_Request) (*CreateInode_Response, error)
	// Link will make a hard link to the old inode with the given attributes
	Link(context.Context, *Link_Request) (*Link_Response, error)
	// Rename move an entry from a source directory to another with given name.
	// The targeted entry will be overwrited if it's a file or empty directory.
	Rename(context.Context, *Rename_Request) (*Rename_Response, error)
	// AcquireFileLock will acquire a file lock.
	AcquireFileLock(context.Context, *AcquireFileLock_Request) (*AcquireFileLock_Request, error)
	// GetFileLock will acquire a file lock.
	GetFileLock(context.Context, *GetFileLock_Request) (*GetFileLock_Response, error)
	// DelFileLock will release a file lock.
	DelFileLock(context.Context, *DelFileLock_Request) (*DelFileLock_Response, error)
	// GetFileLocks will get all file locks.
	GetFileLocks(context.Context, *GetFileLocks_Request) (*GetFileLocks_Response, error)
}

// UnimplementedRawNodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRawNodeServiceServer struct {
}

func (UnimplementedRawNodeServiceServer) IfExistsInode(context.Context, *IfExistsInode_Request) (*IfExistsInode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IfExistsInode not implemented")
}
func (UnimplementedRawNodeServiceServer) GetInodeAttr(context.Context, *GetInodeAttr_Request) (*GetInodeAttr_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInodeAttr not implemented")
}
func (UnimplementedRawNodeServiceServer) Lookup(context.Context, *Lookup_Request) (*Lookup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedRawNodeServiceServer) ListItemUnderInode(context.Context, *ListItemUnderInode_Request) (*ListItemUnderInode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemUnderInode not implemented")
}
func (UnimplementedRawNodeServiceServer) UpdateInodeAttr(context.Context, *UpdateInodeAttr_Request) (*UpdateInodeAttr_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInodeAttr not implemented")
}
func (UnimplementedRawNodeServiceServer) DeleteInode(context.Context, *DeleteInode_Request) (*DeleteInode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInode not implemented")
}
func (UnimplementedRawNodeServiceServer) DeleteDirInode(context.Context, *DeleteDirInode_Request) (*DeleteDirInode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirInode not implemented")
}
func (UnimplementedRawNodeServiceServer) CreateInode(context.Context, *CreateInode_Request) (*CreateInode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInode not implemented")
}
func (UnimplementedRawNodeServiceServer) Link(context.Context, *Link_Request) (*Link_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedRawNodeServiceServer) Rename(context.Context, *Rename_Request) (*Rename_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedRawNodeServiceServer) AcquireFileLock(context.Context, *AcquireFileLock_Request) (*AcquireFileLock_Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireFileLock not implemented")
}
func (UnimplementedRawNodeServiceServer) GetFileLock(context.Context, *GetFileLock_Request) (*GetFileLock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileLock not implemented")
}
func (UnimplementedRawNodeServiceServer) DelFileLock(context.Context, *DelFileLock_Request) (*DelFileLock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFileLock not implemented")
}
func (UnimplementedRawNodeServiceServer) GetFileLocks(context.Context, *GetFileLocks_Request) (*GetFileLocks_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileLocks not implemented")
}

// UnsafeRawNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawNodeServiceServer will
// result in compilation errors.
type UnsafeRawNodeServiceServer interface {
	mustEmbedUnimplementedRawNodeServiceServer()
}

func RegisterRawNodeServiceServer(s grpc.ServiceRegistrar, srv RawNodeServiceServer) {
	s.RegisterService(&RawNodeService_ServiceDesc, srv)
}

func _RawNodeService_IfExistsInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IfExistsInode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).IfExistsInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_IfExistsInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).IfExistsInode(ctx, req.(*IfExistsInode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_GetInodeAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInodeAttr_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).GetInodeAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_GetInodeAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).GetInodeAttr(ctx, req.(*GetInodeAttr_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lookup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).Lookup(ctx, req.(*Lookup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_ListItemUnderInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemUnderInode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).ListItemUnderInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_ListItemUnderInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).ListItemUnderInode(ctx, req.(*ListItemUnderInode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_UpdateInodeAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInodeAttr_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).UpdateInodeAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_UpdateInodeAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).UpdateInodeAttr(ctx, req.(*UpdateInodeAttr_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_DeleteInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).DeleteInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_DeleteInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).DeleteInode(ctx, req.(*DeleteInode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_DeleteDirInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirInode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).DeleteDirInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_DeleteDirInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).DeleteDirInode(ctx, req.(*DeleteDirInode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_CreateInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).CreateInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_CreateInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).CreateInode(ctx, req.(*CreateInode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).Link(ctx, req.(*Link_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rename_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).Rename(ctx, req.(*Rename_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_AcquireFileLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireFileLock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).AcquireFileLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_AcquireFileLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).AcquireFileLock(ctx, req.(*AcquireFileLock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_GetFileLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileLock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).GetFileLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_GetFileLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).GetFileLock(ctx, req.(*GetFileLock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_DelFileLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFileLock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).DelFileLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_DelFileLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).DelFileLock(ctx, req.(*DelFileLock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawNodeService_GetFileLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileLocks_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawNodeServiceServer).GetFileLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RawNodeService_GetFileLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawNodeServiceServer).GetFileLocks(ctx, req.(*GetFileLocks_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RawNodeService_ServiceDesc is the grpc.ServiceDesc for RawNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hugo.v1.meta.RawNodeService",
	HandlerType: (*RawNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IfExistsInode",
			Handler:    _RawNodeService_IfExistsInode_Handler,
		},
		{
			MethodName: "GetInodeAttr",
			Handler:    _RawNodeService_GetInodeAttr_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _RawNodeService_Lookup_Handler,
		},
		{
			MethodName: "ListItemUnderInode",
			Handler:    _RawNodeService_ListItemUnderInode_Handler,
		},
		{
			MethodName: "UpdateInodeAttr",
			Handler:    _RawNodeService_UpdateInodeAttr_Handler,
		},
		{
			MethodName: "DeleteInode",
			Handler:    _RawNodeService_DeleteInode_Handler,
		},
		{
			MethodName: "DeleteDirInode",
			Handler:    _RawNodeService_DeleteDirInode_Handler,
		},
		{
			MethodName: "CreateInode",
			Handler:    _RawNodeService_CreateInode_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _RawNodeService_Link_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RawNodeService_Rename_Handler,
		},
		{
			MethodName: "AcquireFileLock",
			Handler:    _RawNodeService_AcquireFileLock_Handler,
		},
		{
			MethodName: "GetFileLock",
			Handler:    _RawNodeService_GetFileLock_Handler,
		},
		{
			MethodName: "DelFileLock",
			Handler:    _RawNodeService_DelFileLock_Handler,
		},
		{
			MethodName: "GetFileLocks",
			Handler:    _RawNodeService_GetFileLocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta/node.proto",
}
