// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: storage/storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageService_Read_FullMethodName         = "/hugo.v1.storage.StorageService/Read"
	StorageService_StreamRead_FullMethodName   = "/hugo.v1.storage.StorageService/StreamRead"
	StorageService_Write_FullMethodName        = "/hugo.v1.storage.StorageService/Write"
	StorageService_StreamWrite_FullMethodName  = "/hugo.v1.storage.StorageService/StreamWrite"
	StorageService_DeleteBlock_FullMethodName  = "/hugo.v1.storage.StorageService/DeleteBlock"
	StorageService_ListBlocks_FullMethodName   = "/hugo.v1.storage.StorageService/ListBlocks"
	StorageService_EvictBlock_FullMethodName   = "/hugo.v1.storage.StorageService/EvictBlock"
	StorageService_RecycleSpace_FullMethodName = "/hugo.v1.storage.StorageService/RecycleSpace"
	StorageService_Warmup_FullMethodName       = "/hugo.v1.storage.StorageService/Warmup"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	Read(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (*Read_Response, error)
	StreamRead(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (StorageService_StreamReadClient, error)
	Write(ctx context.Context, in *WriteBlock_Request, opts ...grpc.CallOption) (*WriteBlock_Response, error)
	StreamWrite(ctx context.Context, opts ...grpc.CallOption) (StorageService_StreamWriteClient, error)
	DeleteBlock(ctx context.Context, in *DeleteBlock_Request, opts ...grpc.CallOption) (*DeleteBlock_Response, error)
	ListBlocks(ctx context.Context, in *ListBlocks_Request, opts ...grpc.CallOption) (*ListBlocks_Response, error)
	EvictBlock(ctx context.Context, in *EvictBlock_Request, opts ...grpc.CallOption) (*EvictBlock_Response, error)
	RecycleSpace(ctx context.Context, in *RecycleSpace_Request, opts ...grpc.CallOption) (*RecycleSpace_Response, error)
	Warmup(ctx context.Context, in *Warmup_Request, opts ...grpc.CallOption) (*Warmup_Response, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Read(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (*Read_Response, error) {
	out := new(Read_Response)
	err := c.cc.Invoke(ctx, StorageService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StreamRead(ctx context.Context, in *Read_Request, opts ...grpc.CallOption) (StorageService_StreamReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_StreamRead_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceStreamReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_StreamReadClient interface {
	Recv() (*StreamReadResponse, error)
	grpc.ClientStream
}

type storageServiceStreamReadClient struct {
	grpc.ClientStream
}

func (x *storageServiceStreamReadClient) Recv() (*StreamReadResponse, error) {
	m := new(StreamReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) Write(ctx context.Context, in *WriteBlock_Request, opts ...grpc.CallOption) (*WriteBlock_Response, error) {
	out := new(WriteBlock_Response)
	err := c.cc.Invoke(ctx, StorageService_Write_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) StreamWrite(ctx context.Context, opts ...grpc.CallOption) (StorageService_StreamWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], StorageService_StreamWrite_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceStreamWriteClient{stream}
	return x, nil
}

type StorageService_StreamWriteClient interface {
	Send(*StreamWrite_Request) error
	CloseAndRecv() (*StreamWrite_Response, error)
	grpc.ClientStream
}

type storageServiceStreamWriteClient struct {
	grpc.ClientStream
}

func (x *storageServiceStreamWriteClient) Send(m *StreamWrite_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceStreamWriteClient) CloseAndRecv() (*StreamWrite_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamWrite_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) DeleteBlock(ctx context.Context, in *DeleteBlock_Request, opts ...grpc.CallOption) (*DeleteBlock_Response, error) {
	out := new(DeleteBlock_Response)
	err := c.cc.Invoke(ctx, StorageService_DeleteBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ListBlocks(ctx context.Context, in *ListBlocks_Request, opts ...grpc.CallOption) (*ListBlocks_Response, error) {
	out := new(ListBlocks_Response)
	err := c.cc.Invoke(ctx, StorageService_ListBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) EvictBlock(ctx context.Context, in *EvictBlock_Request, opts ...grpc.CallOption) (*EvictBlock_Response, error) {
	out := new(EvictBlock_Response)
	err := c.cc.Invoke(ctx, StorageService_EvictBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) RecycleSpace(ctx context.Context, in *RecycleSpace_Request, opts ...grpc.CallOption) (*RecycleSpace_Response, error) {
	out := new(RecycleSpace_Response)
	err := c.cc.Invoke(ctx, StorageService_RecycleSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) Warmup(ctx context.Context, in *Warmup_Request, opts ...grpc.CallOption) (*Warmup_Response, error) {
	out := new(Warmup_Response)
	err := c.cc.Invoke(ctx, StorageService_Warmup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations should embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	Read(context.Context, *Read_Request) (*Read_Response, error)
	StreamRead(*Read_Request, StorageService_StreamReadServer) error
	Write(context.Context, *WriteBlock_Request) (*WriteBlock_Response, error)
	StreamWrite(StorageService_StreamWriteServer) error
	DeleteBlock(context.Context, *DeleteBlock_Request) (*DeleteBlock_Response, error)
	ListBlocks(context.Context, *ListBlocks_Request) (*ListBlocks_Response, error)
	EvictBlock(context.Context, *EvictBlock_Request) (*EvictBlock_Response, error)
	RecycleSpace(context.Context, *RecycleSpace_Request) (*RecycleSpace_Response, error)
	Warmup(context.Context, *Warmup_Request) (*Warmup_Response, error)
}

// UnimplementedStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) Read(context.Context, *Read_Request) (*Read_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStorageServiceServer) StreamRead(*Read_Request, StorageService_StreamReadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRead not implemented")
}
func (UnimplementedStorageServiceServer) Write(context.Context, *WriteBlock_Request) (*WriteBlock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedStorageServiceServer) StreamWrite(StorageService_StreamWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWrite not implemented")
}
func (UnimplementedStorageServiceServer) DeleteBlock(context.Context, *DeleteBlock_Request) (*DeleteBlock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (UnimplementedStorageServiceServer) ListBlocks(context.Context, *ListBlocks_Request) (*ListBlocks_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlocks not implemented")
}
func (UnimplementedStorageServiceServer) EvictBlock(context.Context, *EvictBlock_Request) (*EvictBlock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictBlock not implemented")
}
func (UnimplementedStorageServiceServer) RecycleSpace(context.Context, *RecycleSpace_Request) (*RecycleSpace_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleSpace not implemented")
}
func (UnimplementedStorageServiceServer) Warmup(context.Context, *Warmup_Request) (*Warmup_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warmup not implemented")
}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Read_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Read(ctx, req.(*Read_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Read_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).StreamRead(m, &storageServiceStreamReadServer{stream})
}

type StorageService_StreamReadServer interface {
	Send(*StreamReadResponse) error
	grpc.ServerStream
}

type storageServiceStreamReadServer struct {
	grpc.ServerStream
}

func (x *storageServiceStreamReadServer) Send(m *StreamReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBlock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Write(ctx, req.(*WriteBlock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_StreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).StreamWrite(&storageServiceStreamWriteServer{stream})
}

type StorageService_StreamWriteServer interface {
	SendAndClose(*StreamWrite_Response) error
	Recv() (*StreamWrite_Request, error)
	grpc.ServerStream
}

type storageServiceStreamWriteServer struct {
	grpc.ServerStream
}

func (x *storageServiceStreamWriteServer) SendAndClose(m *StreamWrite_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceStreamWriteServer) Recv() (*StreamWrite_Request, error) {
	m := new(StreamWrite_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_DeleteBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteBlock(ctx, req.(*DeleteBlock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ListBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlocks_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ListBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_ListBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ListBlocks(ctx, req.(*ListBlocks_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_EvictBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictBlock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).EvictBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_EvictBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).EvictBlock(ctx, req.(*EvictBlock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_RecycleSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleSpace_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RecycleSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_RecycleSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RecycleSpace(ctx, req.(*RecycleSpace_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_Warmup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warmup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Warmup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Warmup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Warmup(ctx, req.(*Warmup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hugo.v1.storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _StorageService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _StorageService_Write_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _StorageService_DeleteBlock_Handler,
		},
		{
			MethodName: "ListBlocks",
			Handler:    _StorageService_ListBlocks_Handler,
		},
		{
			MethodName: "EvictBlock",
			Handler:    _StorageService_EvictBlock_Handler,
		},
		{
			MethodName: "RecycleSpace",
			Handler:    _StorageService_RecycleSpace_Handler,
		},
		{
			MethodName: "Warmup",
			Handler:    _StorageService_Warmup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRead",
			Handler:       _StorageService_StreamRead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamWrite",
			Handler:       _StorageService_StreamWrite_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storage/storage.proto",
}
